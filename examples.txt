Examples on how the exercises can be written in the system.
Refer to all the examples and generate a new exercise based on the given examples.

[Example of 1+1]
    [BEGIN]
        ### Problem
        print("$1+1=?$")
        a = input()
        if a!="2":
        raise Exception(f"Your answer is wrong! The answer of this question is not {a}")
        print("You are correct, then please answer $2+2=?$")
        b = input()
        if b!="4":
        raise Exception(rf"You are wrong , $2+2 \neq {b}$!")
    [END]
For this basic problem, the answer is not an matrix so it should get the input as a string.
Interact with users by two main functions, print(message) for exercise prompt, raise Exception for wrong answer comment or alert.
If the program is successfully runing through, then it means the student's answer is correct.

[Example of SemiPositive definite matrix]
    [BEGIN]
        #### Problem

        from sympy import randMatrix, latex, Matrix,sqrt
        import json
        import re

        A = randMatrix(3, max=5, min=1, symmetric=True)
        B = Matrix(A.tolist())
        print(rf"""
        Is the following matrix positive semi-definite?
        $$
        A={latex(A)}
        $$
        If yes, answer 'Yes'. Otherwise, answer 'No'...
        """
        )

        #### Solutions

        n = A.rows
        collect = []
        center = []
        rows = []

        for i in range(n):
            if all(element.is_zero for element in A[:,i]):
                continue
            elif A[i,i]==0:
                break
            cross = A[:,i]*A[i,:]/A[i,i]
            collect += [cross]
            rows += [A[i,:]/sqrt(A[i,i])]
            center += [A[i,i]]
            A-= cross

        exp = "+".join([latex(i) for i in collect])
        if all(element.is_zero for element in A):
            print("We have a complete diagonal cross filling for matrix")
            print(rf"$${exp}$$")
            if all (c>=0 for c in center):
                print("This means the original matrix is semi-positive definite")
                U = Matrix.vstack(*rows)
                print(rf"$$U={latex(U)}$$ and we have $A=U^TU$")
            else:
                print("This means the original matrix is NOT semi-positive definite")
        else:
            print("We can not do a complete diagonal cross filling for the matrix, the matrix is indefinite")
            print(rf"$${exp}+{latex(A)}$$")

        A = B



        #### Exercise

        answer = input().strip().upper()
        answer = re.sub(r'[^a-zA-Z0-9]', '', answer)

        if answer not in ['YES', 'NO']:
            raise Exception('Please answer in yes or no')

        if answer == 'YES':
            print(rf"""
            You mentioned it is a positive semi-definite matrix. Please decompose it into $A=LL^T$ where $L$ is a lower triangular matrix. Please enter your matrix $U$.
            """)
            X = json.loads(input())  #matrixlist
            if (k := len(X)) != 1:
                raise Exception(rf"You are required to enter 1 matrix, but {k} matrices detected")

            M = Matrix(X[0])
            print(rf"By what you've entered, you mean $$U = {latex(M)}$$")
            if not M.is_lower:
                raise Exception(rf"What you've suggested is not a lower triangular matrix...")

        #### Verification
            P = M * M.T
            print(rf"By what you've suggested, we have $UU^T = {latex(P)}$")

            if P != A:
                raise Exception(rf"But $UU^T\neq A$...")#score = 0.1
    [END]

[Example of finding the inverse of a matrix]
    [BEGIN]
        import random
        from sympy import Matrix, latex, eye
        from sympy.combinatorics import Permutation
        import json

        scale = 4 # scale of randomness of the matrix entry
        n = 3 # The size of the matrix.

        ## The following code generates an upper triangular matrix
        upper = [[1 if i == j else 0 if i < j else int(random.random()*scale) for j in range(n)] for i in range(n)]

        ## The following code generates an lower triangular matrix
        lower = [[1 if i == j else 0 if i > j else int(random.random()*scale) for j in range(n)] for i in range(n)]

        ## The following code, we generate a random switching matrix.
        switch = list(range(n))
        random.shuffle(switch)
        sw = eye(n)[switch,:]

        

        ## Pack the above into matrices that can be processed by sympy
        up = Matrix(upper)
        lo = Matrix(lower)


        ## The following matrix is going to give the student as content of exercise

        givenMatrix = sw*up*lo

        print("Please find the inverse of the following matrix.")
        print(f"$$A={latex(givenMatrix)}$$")

        X = json.loads(input())#matrixlist

        if len(X)!=1:
        raise Exception(f"You should enter exactly one matrix, but {len(X)} many matrices are detected") #score = 0.1

        userMatrix = Matrix(X[0])

        if userMatrix.cols!= n:
        raise Exception(f"Your matrix must have {n} columns, but now your matrix have {userMatrix.cols} columns") #score=0.3

        if userMatrix.rows!= n:
        raise Exception(f"Your matrix must have {n} rows, but now your matrix have {userMatrix.rows} rows") #score = 0.6
        
        verification = rf"""
        $$\underbrace{{{latex(givenMatrix)}}}_A\times {latex(userMatrix)} = {latex(givenMatrix*userMatrix)}$$
        """

        if(givenMatrix*userMatrix!=eye(3)):
        raise Exception(rf"You have suggest that $$A^{{-1}}={latex(userMatrix)}$$. However, {verification}") #score=0.9

        print(rf"You have suggest that $$A^{{-1}}={latex(userMatrix)}$$")
        print(rf"We verify your result {verification}")

    [END]

With this example, it encounters the student to put an inverse matrix as an input

